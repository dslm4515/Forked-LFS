# Create a full version of the internal header using a command that is identical 
# to what the GCC build system does in normal circumstances:
cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
  `dirname $($LFS_TGT-gcc -print-libgcc-file-name)`/include-fixed/limits.h

# Change the location of GCC's default dynamic linker to use the one installed 
# in /tools.
for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
      -e 's@/usr@/tools@g' $file.orig > $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
  touch $file.orig
done

# If building on x86_64, change the default directory name for 64-bit libraries 
# to “lib”:
case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac

# GCC now requires the GMP, MPFR and MPC packages to build.
# Unpack them in-tree.
xz -cd ../pkgs/mpfr-4.1.0.tar.xz | tar -xf -
xz -cd ../pkgs/gmp-6.2.1.tar.xz | tar -xf -
gzip -cd ../pkgs/mpc-1.2.1.tar.gz | tar -xf -
mv -v mpfr-4.1.0 mpfr
mv -v gmp-6.2.1 gmp
mv -v mpc-1.2.1 mpc

# Create a separate build directory again:
mkdir -v build
cd       build

# Prepare GCC for compilation:
CC=$LFS_TGT-gcc                                    \
CXX=$LFS_TGT-g++                                   \
AR=$LFS_TGT-ar                                     \
RANLIB=$LFS_TGT-ranlib                             \
../configure                                       \
    --prefix=/tools                                \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --enable-languages=c,c++                       \
    --disable-libstdcxx-pch                        \
    --disable-multilib                             \
    --disable-bootstrap                            \
    --disable-libgomp

# Compile
make 

# Install to /tools
make install

# As a finishing touch, create a symlink. Many programs and 
# scripts run cc instead of gcc, which is used to keep 
# programs generic and therefore usable on all kinds of 
# UNIX systems where the GNU C compiler is not always 
# installed. Running cc leaves the system administrator 
# free to decide which C compiler to install:
ln -sv gcc /tools/bin/cc

# At this point, it is imperative to stop and ensure that 
# the basic functions (compiling and linking) of the new 
# toolchain are working as expected. To perform a sanity 
# check, run the following commands:
echo 'int main(){}' > dummy.c
cc dummy.c
readelf -l a.out | grep ': /tools'
# If everything is working correctly, there should be no 
# errors, and the output of the last command will be of 
# the form:
# [Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]
#
# Once all is well, clean up the test files:
rm -v dummy.c a.out
